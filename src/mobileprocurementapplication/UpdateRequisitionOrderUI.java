/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package mobileprocurementapplication;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * This interface is used to update a requisition order
 * 
 * @author CSSD GROUP A
 * @version 1.0
 */
public class UpdateRequisitionOrderUI extends javax.swing.JFrame {

    private static final String ItemFile = "Item.ser";
    private SetOfItems<Item> itemList = new SetOfItems();
    private ItemService itemService;
    
    private static final String RequisitionOrderFile = "RequisitionOrder.ser";
    private SetOfRequisitionOrders<RequisitionOrder> orderList = new SetOfRequisitionOrders();
    private RequisitionOrderService orderService;   
    
    public static int orderNumber;
    public static String userName; 
    public static String siteName;
    
    public UpdateRequisitionOrderUI(int OrderID, String Username, String SiteName) {
        initComponents();
        
        //Setting window to center
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        
        orderNumber = OrderID;
        userName = Username;
        siteName = SiteName;
        
        itemService = new ItemService();
        orderService = new RequisitionOrderService();
        
        //Deserializing
        try {
            itemList = this.itemService.Deserialize(ItemFile);
            orderList = this.orderService.Deserialize(RequisitionOrderFile);
        } catch (IOException ex) {
            Logger.getLogger(UpdateRequisitionOrderUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(UpdateRequisitionOrderUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //Creating a jTable model       
        
        DefaultTableModel model = new DefaultTableModel();     
        model.addColumn("Items");
        model.addColumn("Quantity");
        model.addColumn("Cost");
        
        jTable1.setModel(model);
        
        RequisitionOrder theOrder = new RequisitionOrder();
        
        
        for(RequisitionOrder order : orderList)
        {
            if(order.getOrderID() == orderNumber)
            {
                theOrder = order;
            }
        }
        
        SetOfItems<Item> itemList = new SetOfItems();
        double [] quantityList = new double[theOrder.getQuantityArraySize()];
        
        itemList = theOrder.getItems();
        quantityList = theOrder.getQuantity();
        
        for(int i=0; i<theOrder.getItemCount(); i++)
        {
            model.addRow(new Object[]{itemList.get(i).getItemID() + " " + itemList.get(i), quantityList[i], (itemList.get(i).getItemPrice() * quantityList[i])});
        }        
        
        //Setting the order date to the date chooser
        Date theDate;
        
        try {
            theDate = new SimpleDateFormat("dd/MM/yyyy").parse(theOrder.getRequiredDate());
            jDateRequired.setDate(theDate);            
        } catch (ParseException ex) {
            Logger.getLogger(UpdateRequisitionOrderUI.class.getName()).log(Level.SEVERE, null, ex);
        }
                 
        
        txtComments.setText(theOrder.getComments());
        
        //Make the form uneditable
        notEditable();
        
                
        
        
    }
    
    public void reset()
    {
        
    }
    
    private UpdateRequisitionOrderUI() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnReturnToSiteMangerUI = new javax.swing.JButton();
        btnMakeEditable = new javax.swing.JButton();
        btnViewItems = new javax.swing.JButton();
        cmbItems = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        btnAddItem = new javax.swing.JButton();
        btnDeleteItem = new javax.swing.JButton();
        btnCheckTotal = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtComments = new javax.swing.JTextArea();
        btnUpdateOrder = new javax.swing.JButton();
        jDateRequired = new com.toedter.calendar.JDateChooser();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Update Requisition Order");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnReturnToSiteMangerUI.setText("Back");
        btnReturnToSiteMangerUI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnToSiteMangerUIActionPerformed(evt);
            }
        });

        btnMakeEditable.setText("Make Editable");
        btnMakeEditable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMakeEditableActionPerformed(evt);
            }
        });

        btnViewItems.setText("View All Items");
        btnViewItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewItemsActionPerformed(evt);
            }
        });

        jLabel2.setText("Select Quantity");

        btnAddItem.setText("Add Item");
        btnAddItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddItemActionPerformed(evt);
            }
        });

        btnDeleteItem.setText("Delete Item");
        btnDeleteItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteItemActionPerformed(evt);
            }
        });

        btnCheckTotal.setText("Check Total");
        btnCheckTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckTotalActionPerformed(evt);
            }
        });

        jLabel3.setText("When are these Items Required?");

        jLabel4.setText("Additional Comments");

        txtComments.setColumns(20);
        txtComments.setLineWrap(true);
        txtComments.setRows(5);
        jScrollPane2.setViewportView(txtComments);

        btnUpdateOrder.setText("Update Order");
        btnUpdateOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                                    .addComponent(jDateRequired, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnViewItems)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 49, Short.MAX_VALUE)
                                .addComponent(cmbItems, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnMakeEditable)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addComponent(btnAddItem)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDeleteItem)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnCheckTotal)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnUpdateOrder)
                        .addGap(48, 48, 48))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnReturnToSiteMangerUI)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnMakeEditable)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewItems)
                    .addComponent(cmbItems, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddItem)
                    .addComponent(btnDeleteItem)
                    .addComponent(btnCheckTotal))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdateOrder)
                        .addGap(18, 18, 18)
                        .addComponent(btnReturnToSiteMangerUI))
                    .addComponent(jDateRequired, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnToSiteMangerUIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnToSiteMangerUIActionPerformed
        SiteManagerUI smui = new SiteManagerUI(userName);
        this.dispose();
        smui.setVisible(true);               
    }//GEN-LAST:event_btnReturnToSiteMangerUIActionPerformed

    private void btnViewItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewItemsActionPerformed

        cmbItems.removeAllItems();

        for(Item item : itemList)
        {
            cmbItems.addItem(item.getItemID() + " " + item.getItemName() + " (" + item.getItemType() + ") " + "Price = " + item.getItemPrice());
        }

    }//GEN-LAST:event_btnViewItemsActionPerformed

    private void btnAddItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddItemActionPerformed

        //Adding items to jTable1

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        if(cmbItems.getSelectedIndex() == -1)
        {
            JOptionPane.showMessageDialog(null, "Please select an item to add to order");
        }
        else if(txtQuantity.getText().equals(""))
        {
            JOptionPane.showMessageDialog(null, "Please enter item quantity");
        }
        else
        {
            String cmbItem = cmbItems.getSelectedItem().toString();

            double Cost = Double.parseDouble(cmbItem.substring(cmbItem.indexOf('=') + 1)) * Double.parseDouble(txtQuantity.getText());

            model.addRow(new Object[]{cmbItems.getSelectedItem(), txtQuantity.getText(), Cost});
        }

    }//GEN-LAST:event_btnAddItemActionPerformed

    private void btnDeleteItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteItemActionPerformed
        //Deleting an item from order

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        if(jTable1.getSelectedRow() == -1)
        {
            if(jTable1.getRowCount() == 0)
            {
                JOptionPane.showMessageDialog(null, "The table is empty");
            }
            else
            {
                JOptionPane.showMessageDialog(null, "You must select a product");
            }
        }
        else
        {
            model.removeRow(jTable1.getSelectedRow());
        }
    }//GEN-LAST:event_btnDeleteItemActionPerformed

    private void btnCheckTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckTotalActionPerformed
        //Checking the total of all items

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        double total = 0;
        int nRow = jTable1.getRowCount(), nCol = jTable1.getColumnCount();

        if(jTable1.getRowCount() == 0)
        {
            JOptionPane.showMessageDialog(null, "No orders placed");
        }
        else
        {
            for(int i=0; i<nRow; i++)
            {
                total = total + Double.parseDouble(jTable1.getValueAt(i, 2).toString());
            }

            JOptionPane.showMessageDialog(null, "Total Price of Items = " + total);
        }

    }//GEN-LAST:event_btnCheckTotalActionPerformed

    private void btnUpdateOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateOrderActionPerformed
        //Place Requisition Order

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

        int nRow = jTable1.getRowCount(), nCol = jTable1.getColumnCount();

        SetOfItems<Item> tempItemList = new SetOfItems();
        double [] quantityList = new double[nRow];

        //Validations

        if(nRow == 0)
        {
            JOptionPane.showMessageDialog(null, "No orders placed");
        }        
        else
        {
            for(int i=0; i<nRow; i++)
            {
                int tempItemID = Integer.parseInt(jTable1.getValueAt(i, 0).toString().substring(0, jTable1.getValueAt(i, 0).toString().indexOf(" ")));
                tempItemList.add(this.itemService.getThisItem(tempItemID, itemList));
            }

            for(int i=0; i<nRow; i++)
            {
                quantityList[i] = Double.parseDouble(jTable1.getValueAt(i, 1).toString());
            }

            
            double totalPriceOfItems = 0;

            //Iterating through the table to get the total price of all the items from the jTable
            for(int i=0; i<nRow; i++)
            {
                totalPriceOfItems = totalPriceOfItems + Double.parseDouble(jTable1.getValueAt(i, 2).toString());
            }
            
            //Setting the dateformat of the jDateChooser
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault());

            RequisitionOrder updateOrder = new RequisitionOrder(orderNumber, tempItemList, quantityList, totalPriceOfItems, sdf.format(jDateRequired.getDate()), txtComments.getText(), userName, siteName);
            
            int x = JOptionPane.showConfirmDialog(null, "Are you sure you want to update?");
            
            if(x == 0)
            {
                try {
                    orderList = this.orderService.updateOrderByID(updateOrder, orderList);
                    this.orderService.Serialize(orderList, RequisitionOrderFile);
                    JOptionPane.showMessageDialog(null, "Order Successfully Updated");
                    notEditable();
                } catch (IOException ex) {
                    Logger.getLogger(SiteManagerUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }          

        }

    }//GEN-LAST:event_btnUpdateOrderActionPerformed

    public void editable()
    {
        btnViewItems.setEnabled(true);
        cmbItems.setEnabled(true);
        btnAddItem.setEnabled(true);
        btnDeleteItem.setEnabled(true);
        btnCheckTotal.setEnabled(true);
        jTable1.setEnabled(true);
        jDateRequired.setEnabled(true); 
        txtQuantity.setEnabled(true);
        txtComments.setEnabled(true);
        btnUpdateOrder.setEnabled(true);
        
    }
    
    public void notEditable()
    {
        btnViewItems.setEnabled(false);
        cmbItems.setEnabled(false);
        btnAddItem.setEnabled(false);
        btnDeleteItem.setEnabled(false);
        btnCheckTotal.setEnabled(false);
        jTable1.setEnabled(false);
        jDateRequired.setEnabled(false); 
        txtQuantity.setEnabled(false);
        txtComments.setEnabled(false);
        btnUpdateOrder.setEnabled(false);
    }
    
    private void btnMakeEditableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMakeEditableActionPerformed
        editable();
    }//GEN-LAST:event_btnMakeEditableActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateRequisitionOrderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateRequisitionOrderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateRequisitionOrderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateRequisitionOrderUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateRequisitionOrderUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddItem;
    private javax.swing.JButton btnCheckTotal;
    private javax.swing.JButton btnDeleteItem;
    private javax.swing.JButton btnMakeEditable;
    private javax.swing.JButton btnReturnToSiteMangerUI;
    private javax.swing.JButton btnUpdateOrder;
    private javax.swing.JButton btnViewItems;
    private javax.swing.JComboBox cmbItems;
    private com.toedter.calendar.JDateChooser jDateRequired;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea txtComments;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}
